version: "3.9"

services:
  web:
    build:
      context: .
      dockerfile: ./src/web-service/Dockerfile
    environment:
      PORT: 8080
    networks:
      - backend
  proxy:
    ports:
      - "8080:8080"
    build:
      context: .
      dockerfile: ./src/reverse-proxy/Dockerfile
    environment:
      PORT: 8080
      CONFIG_FILE: $CONFIG_FILE
    networks:
      - backend
  user:
    build:
      context: .
      dockerfile: ./src/user-service/Dockerfile
    environment:
      PORT: 8080
      # JWT_PRIVATE_KEY: $JWT_PRIVATE_KEY
      # JWT_PUBLIC_KEY: $JWT_PUBLIC_KEY
      JWT_PRIVATE_KEY_PATH: /certs/id_rsa
      JWT_PUBLIC_KEY_PATH: /certs/id_rsa.pub
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      POSTGRES_DB: $POSTGRES_DB
      TZ: Europe/Berlin
    volumes:
      - type: bind
        source: ./src/user-service/certs
        target: /certs
        read_only: true
    networks:
      - backend
    depends_on:
      db:
        condition: service_healthy
  book:
    build:
      context: .
      dockerfile: ./src/book-service/Dockerfile
    environment:
      AUTH_URL_ENDPOINT: http://user:8080/validate-token
      TRANSACTION_SERVICE_ENDPOINT: http://transaction:8080/check-chapter-bought
      PORT: 8080
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      POSTGRES_DB: $POSTGRES_DB
      TZ: Europe/Berlin
    networks:
      - backend
    depends_on:
      db:
        condition: service_healthy
  transaction:
    build:
      context: .
      dockerfile: ./src/transaction-service/Dockerfile
    environment:
      AUTH_URL_ENDPOINT: http://user:8080/validate-token
      BOOK_SERVICE_ENDPOINT: http://book:8080/valdiate-chapter-id
      USER_SERVICE_ENDPOINT: http://user:8080/move-user-amount
      PORT: 8080
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      POSTGRES_DB: $POSTGRES_DB
      TZ: Europe/Berlin
    networks:
      - backend
    depends_on:
      db:
        condition: service_healthy
  db:
    build:
      context: ./src/db
      dockerfile: Dockerfile
    environment:
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      POSTGRES_DB: $POSTGRES_DB
      TZ: Europe/Berlin
    networks:
      - backend
    ports:
      - "5432:5432"

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

networks:
  backend:
    driver: bridge
    name: backend

// Code generated by MockGen. DO NOT EDIT.
// Source: chapters/controller.go
//
// Generated by this command:
//
//	mockgen -source=chapters/controller.go -package=chapters_mocks -destination=_mocks/chapters/controller.go
//
// Package chapters_mocks is a generated GoMock package.
package chapters_mocks

import (
	http "net/http"
	reflect "reflect"

	router "github.com/akatranlp/hsfl-master-ai-cloud-engineering/lib/router"
	gomock "go.uber.org/mock/gomock"
)

// MockController is a mock of Controller interface.
type MockController struct {
	ctrl     *gomock.Controller
	recorder *MockControllerMockRecorder
}

// MockControllerMockRecorder is the mock recorder for MockController.
type MockControllerMockRecorder struct {
	mock *MockController
}

// NewMockController creates a new mock instance.
func NewMockController(ctrl *gomock.Controller) *MockController {
	mock := &MockController{ctrl: ctrl}
	mock.recorder = &MockControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockController) EXPECT() *MockControllerMockRecorder {
	return m.recorder
}

// DeleteChapter mocks base method.
func (m *MockController) DeleteChapter(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteChapter", arg0, arg1)
}

// DeleteChapter indicates an expected call of DeleteChapter.
func (mr *MockControllerMockRecorder) DeleteChapter(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChapter", reflect.TypeOf((*MockController)(nil).DeleteChapter), arg0, arg1)
}

// GetChapter mocks base method.
func (m *MockController) GetChapter(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetChapter", arg0, arg1)
}

// GetChapter indicates an expected call of GetChapter.
func (mr *MockControllerMockRecorder) GetChapter(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChapter", reflect.TypeOf((*MockController)(nil).GetChapter), arg0, arg1)
}

// GetChapterForBook mocks base method.
func (m *MockController) GetChapterForBook(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetChapterForBook", arg0, arg1)
}

// GetChapterForBook indicates an expected call of GetChapterForBook.
func (mr *MockControllerMockRecorder) GetChapterForBook(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChapterForBook", reflect.TypeOf((*MockController)(nil).GetChapterForBook), arg0, arg1)
}

// GetChaptersForBook mocks base method.
func (m *MockController) GetChaptersForBook(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetChaptersForBook", arg0, arg1)
}

// GetChaptersForBook indicates an expected call of GetChaptersForBook.
func (mr *MockControllerMockRecorder) GetChaptersForBook(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChaptersForBook", reflect.TypeOf((*MockController)(nil).GetChaptersForBook), arg0, arg1)
}

// LoadChapterMiddleware mocks base method.
func (m *MockController) LoadChapterMiddleware(arg0 http.ResponseWriter, arg1 *http.Request, arg2 router.Next) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LoadChapterMiddleware", arg0, arg1, arg2)
}

// LoadChapterMiddleware indicates an expected call of LoadChapterMiddleware.
func (mr *MockControllerMockRecorder) LoadChapterMiddleware(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadChapterMiddleware", reflect.TypeOf((*MockController)(nil).LoadChapterMiddleware), arg0, arg1, arg2)
}

// PatchChapter mocks base method.
func (m *MockController) PatchChapter(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PatchChapter", arg0, arg1)
}

// PatchChapter indicates an expected call of PatchChapter.
func (mr *MockControllerMockRecorder) PatchChapter(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchChapter", reflect.TypeOf((*MockController)(nil).PatchChapter), arg0, arg1)
}

// PostChapter mocks base method.
func (m *MockController) PostChapter(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PostChapter", arg0, arg1)
}

// PostChapter indicates an expected call of PostChapter.
func (mr *MockControllerMockRecorder) PostChapter(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostChapter", reflect.TypeOf((*MockController)(nil).PostChapter), arg0, arg1)
}

// ValidateChapterId mocks base method.
func (m *MockController) ValidateChapterId(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ValidateChapterId", arg0, arg1)
}

// ValidateChapterId indicates an expected call of ValidateChapterId.
func (mr *MockControllerMockRecorder) ValidateChapterId(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateChapterId", reflect.TypeOf((*MockController)(nil).ValidateChapterId), arg0, arg1)
}

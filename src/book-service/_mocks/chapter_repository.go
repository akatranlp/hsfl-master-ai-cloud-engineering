// Code generated by MockGen. DO NOT EDIT.
// Source: books/chapter_repository.go
//
// Generated by this command:
//
//	mockgen.exe -source=books/chapter_repository.go -package=mocks -destination=_mocks/chapter_repository.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	model "github.com/akatranlp/hsfl-master-ai-cloud-engineering/book-service/books/model"
	gomock "go.uber.org/mock/gomock"
)

// MockChapterRepository is a mock of ChapterRepository interface.
type MockChapterRepository struct {
	ctrl     *gomock.Controller
	recorder *MockChapterRepositoryMockRecorder
}

// MockChapterRepositoryMockRecorder is the mock recorder for MockChapterRepository.
type MockChapterRepositoryMockRecorder struct {
	mock *MockChapterRepository
}

// NewMockChapterRepository creates a new mock instance.
func NewMockChapterRepository(ctrl *gomock.Controller) *MockChapterRepository {
	mock := &MockChapterRepository{ctrl: ctrl}
	mock.recorder = &MockChapterRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChapterRepository) EXPECT() *MockChapterRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockChapterRepository) Create(arg0 []*model.Chapter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockChapterRepositoryMockRecorder) Create(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockChapterRepository)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockChapterRepository) Delete(arg0 []*model.Chapter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockChapterRepositoryMockRecorder) Delete(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockChapterRepository)(nil).Delete), arg0)
}

// FindAll mocks base method.
func (m *MockChapterRepository) FindAll() ([]*model.Chapter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]*model.Chapter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockChapterRepositoryMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockChapterRepository)(nil).FindAll))
}

// FindById mocks base method.
func (m *MockChapterRepository) FindById(id uint64) (*model.Chapter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", id)
	ret0, _ := ret[0].(*model.Chapter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockChapterRepositoryMockRecorder) FindById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockChapterRepository)(nil).FindById), id)
}

// Migrate mocks base method.
func (m *MockChapterRepository) Migrate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Migrate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Migrate indicates an expected call of Migrate.
func (mr *MockChapterRepositoryMockRecorder) Migrate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Migrate", reflect.TypeOf((*MockChapterRepository)(nil).Migrate))
}

// Update mocks base method.
func (m *MockChapterRepository) Update(id uint64, chapter *model.UpdateChapter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, chapter)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockChapterRepositoryMockRecorder) Update(id, chapter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockChapterRepository)(nil).Update), id, chapter)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: books/controller.go
//
// Generated by this command:
//
//	mockgen -source=books/controller.go -package=books_mocks -destination=_mocks/books/controller.go
//
// Package books_mocks is a generated GoMock package.
package books_mocks

import (
	http "net/http"
	reflect "reflect"

	router "github.com/akatranlp/hsfl-master-ai-cloud-engineering/lib/router"
	gomock "go.uber.org/mock/gomock"
)

// MockController is a mock of Controller interface.
type MockController struct {
	ctrl     *gomock.Controller
	recorder *MockControllerMockRecorder
}

// MockControllerMockRecorder is the mock recorder for MockController.
type MockControllerMockRecorder struct {
	mock *MockController
}

// NewMockController creates a new mock instance.
func NewMockController(ctrl *gomock.Controller) *MockController {
	mock := &MockController{ctrl: ctrl}
	mock.recorder = &MockControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockController) EXPECT() *MockControllerMockRecorder {
	return m.recorder
}

// DeleteBook mocks base method.
func (m *MockController) DeleteBook(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteBook", arg0, arg1)
}

// DeleteBook indicates an expected call of DeleteBook.
func (mr *MockControllerMockRecorder) DeleteBook(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBook", reflect.TypeOf((*MockController)(nil).DeleteBook), arg0, arg1)
}

// GetBook mocks base method.
func (m *MockController) GetBook(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetBook", arg0, arg1)
}

// GetBook indicates an expected call of GetBook.
func (mr *MockControllerMockRecorder) GetBook(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBook", reflect.TypeOf((*MockController)(nil).GetBook), arg0, arg1)
}

// GetBooks mocks base method.
func (m *MockController) GetBooks(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetBooks", arg0, arg1)
}

// GetBooks indicates an expected call of GetBooks.
func (mr *MockControllerMockRecorder) GetBooks(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBooks", reflect.TypeOf((*MockController)(nil).GetBooks), arg0, arg1)
}

// LoadBookMiddleware mocks base method.
func (m *MockController) LoadBookMiddleware(arg0 http.ResponseWriter, arg1 *http.Request, arg2 router.Next) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LoadBookMiddleware", arg0, arg1, arg2)
}

// LoadBookMiddleware indicates an expected call of LoadBookMiddleware.
func (mr *MockControllerMockRecorder) LoadBookMiddleware(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadBookMiddleware", reflect.TypeOf((*MockController)(nil).LoadBookMiddleware), arg0, arg1, arg2)
}

// PatchBook mocks base method.
func (m *MockController) PatchBook(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PatchBook", arg0, arg1)
}

// PatchBook indicates an expected call of PatchBook.
func (mr *MockControllerMockRecorder) PatchBook(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchBook", reflect.TypeOf((*MockController)(nil).PatchBook), arg0, arg1)
}

// PostBook mocks base method.
func (m *MockController) PostBook(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PostBook", arg0, arg1)
}

// PostBook indicates an expected call of PostBook.
func (mr *MockControllerMockRecorder) PostBook(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostBook", reflect.TypeOf((*MockController)(nil).PostBook), arg0, arg1)
}

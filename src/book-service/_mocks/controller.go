// Code generated by MockGen. DO NOT EDIT.
// Source: books/controller.go
//
// Generated by this command:
//
//	mockgen.exe -package=mocks -destination=_mocks/controller.go -source=books/controller.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockController is a mock of Controller interface.
type MockController struct {
	ctrl     *gomock.Controller
	recorder *MockControllerMockRecorder
}

// MockControllerMockRecorder is the mock recorder for MockController.
type MockControllerMockRecorder struct {
	mock *MockController
}

// NewMockController creates a new mock instance.
func NewMockController(ctrl *gomock.Controller) *MockController {
	mock := &MockController{ctrl: ctrl}
	mock.recorder = &MockControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockController) EXPECT() *MockControllerMockRecorder {
	return m.recorder
}

// DeleteBook mocks base method.
func (m *MockController) DeleteBook(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteBook", arg0, arg1)
}

// DeleteBook indicates an expected call of DeleteBook.
func (mr *MockControllerMockRecorder) DeleteBook(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBook", reflect.TypeOf((*MockController)(nil).DeleteBook), arg0, arg1)
}

// DeleteChapter mocks base method.
func (m *MockController) DeleteChapter(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteChapter", arg0, arg1)
}

// DeleteChapter indicates an expected call of DeleteChapter.
func (mr *MockControllerMockRecorder) DeleteChapter(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChapter", reflect.TypeOf((*MockController)(nil).DeleteChapter), arg0, arg1)
}

// GetBook mocks base method.
func (m *MockController) GetBook(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetBook", arg0, arg1)
}

// GetBook indicates an expected call of GetBook.
func (mr *MockControllerMockRecorder) GetBook(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBook", reflect.TypeOf((*MockController)(nil).GetBook), arg0, arg1)
}

// GetBooks mocks base method.
func (m *MockController) GetBooks(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetBooks", arg0, arg1)
}

// GetBooks indicates an expected call of GetBooks.
func (mr *MockControllerMockRecorder) GetBooks(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBooks", reflect.TypeOf((*MockController)(nil).GetBooks), arg0, arg1)
}

// GetChapter mocks base method.
func (m *MockController) GetChapter(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetChapter", arg0, arg1)
}

// GetChapter indicates an expected call of GetChapter.
func (mr *MockControllerMockRecorder) GetChapter(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChapter", reflect.TypeOf((*MockController)(nil).GetChapter), arg0, arg1)
}

// GetChapters mocks base method.
func (m *MockController) GetChapters(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetChapters", arg0, arg1)
}

// GetChapters indicates an expected call of GetChapters.
func (mr *MockControllerMockRecorder) GetChapters(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChapters", reflect.TypeOf((*MockController)(nil).GetChapters), arg0, arg1)
}

// PostBooks mocks base method.
func (m *MockController) PostBooks(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PostBooks", arg0, arg1)
}

// PostBooks indicates an expected call of PostBooks.
func (mr *MockControllerMockRecorder) PostBooks(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostBooks", reflect.TypeOf((*MockController)(nil).PostBooks), arg0, arg1)
}

// PostChapters mocks base method.
func (m *MockController) PostChapters(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PostChapters", arg0, arg1)
}

// PostChapters indicates an expected call of PostChapters.
func (mr *MockControllerMockRecorder) PostChapters(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostChapters", reflect.TypeOf((*MockController)(nil).PostChapters), arg0, arg1)
}

// PutBook mocks base method.
func (m *MockController) PutBook(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PutBook", arg0, arg1)
}

// PutBook indicates an expected call of PutBook.
func (mr *MockControllerMockRecorder) PutBook(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBook", reflect.TypeOf((*MockController)(nil).PutBook), arg0, arg1)
}

// PutChapter mocks base method.
func (m *MockController) PutChapter(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PutChapter", arg0, arg1)
}

// PutChapter indicates an expected call of PutChapter.
func (mr *MockControllerMockRecorder) PutChapter(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutChapter", reflect.TypeOf((*MockController)(nil).PutChapter), arg0, arg1)
}

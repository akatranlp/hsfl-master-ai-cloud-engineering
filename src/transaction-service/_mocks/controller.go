// Code generated by MockGen. DO NOT EDIT.
// Source: transactions/controller.go
//
// Generated by this command:
//
//	mockgen.exe -source=transactions/controller.go -package=mocks -destination=_mocks/controller.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	router "github.com/akatranlp/hsfl-master-ai-cloud-engineering/lib/router"
	gomock "go.uber.org/mock/gomock"
)

// MockController is a mock of Controller interface.
type MockController struct {
	ctrl     *gomock.Controller
	recorder *MockControllerMockRecorder
}

// MockControllerMockRecorder is the mock recorder for MockController.
type MockControllerMockRecorder struct {
	mock *MockController
}

// NewMockController creates a new mock instance.
func NewMockController(ctrl *gomock.Controller) *MockController {
	mock := &MockController{ctrl: ctrl}
	mock.recorder = &MockControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockController) EXPECT() *MockControllerMockRecorder {
	return m.recorder
}

// AuthenticationMiddleware mocks base method.
func (m *MockController) AuthenticationMiddleware(arg0 http.ResponseWriter, arg1 *http.Request, arg2 router.Next) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AuthenticationMiddleware", arg0, arg1, arg2)
}

// AuthenticationMiddleware indicates an expected call of AuthenticationMiddleware.
func (mr *MockControllerMockRecorder) AuthenticationMiddleware(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticationMiddleware", reflect.TypeOf((*MockController)(nil).AuthenticationMiddleware), arg0, arg1, arg2)
}

// GetTransaction mocks base method.
func (m *MockController) GetTransaction(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetTransaction", arg0, arg1)
}

// GetTransaction indicates an expected call of GetTransaction.
func (mr *MockControllerMockRecorder) GetTransaction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockController)(nil).GetTransaction), arg0, arg1)
}

// GetTransactions mocks base method.
func (m *MockController) GetTransactions(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetTransactions", arg0, arg1)
}

// GetTransactions indicates an expected call of GetTransactions.
func (mr *MockControllerMockRecorder) GetTransactions(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactions", reflect.TypeOf((*MockController)(nil).GetTransactions), arg0, arg1)
}

// PostTransactions mocks base method.
func (m *MockController) PostTransactions(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PostTransactions", arg0, arg1)
}

// PostTransactions indicates an expected call of PostTransactions.
func (mr *MockControllerMockRecorder) PostTransactions(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostTransactions", reflect.TypeOf((*MockController)(nil).PostTransactions), arg0, arg1)
}

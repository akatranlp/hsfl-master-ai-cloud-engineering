// Code generated by MockGen. DO NOT EDIT.
// Source: repository/repository.go
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=_mocks/repository.go -source=repository/repository.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// ResetDatabase mocks base method.
func (m *MockRepository) ResetDatabase() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetDatabase")
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetDatabase indicates an expected call of ResetDatabase.
func (mr *MockRepositoryMockRecorder) ResetDatabase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetDatabase", reflect.TypeOf((*MockRepository)(nil).ResetDatabase))
}
